create database project_table1
use project_table1

CREATE TABLE job_data
(
    ds DATE,
    job_id INT NOT NULL,
    actor_id INT NOT NULL,
    event VARCHAR(15) NOT NULL,
    language VARCHAR(15) NOT NULL,
    time_spent INT NOT NULL,
    org CHAR(2)
);

INSERT INTO job_data (ds, job_id, actor_id, event, language, time_spent, org)
VALUES ('2020-11-30', 21, 1001, 'skip', 'English', 15, 'A'),
    ('2020-11-30', 22, 1006, 'transfer', 'Arabic', 25, 'B'),
    ('2020-11-29', 23, 1003, 'decision', 'Persian', 20, 'C'),
    ('2020-11-28', 23, 1005,'transfer', 'Persian', 22, 'D'),
    ('2020-11-28', 25, 1002, 'decision', 'Hindi', 11, 'B'),
    ('2020-11-27', 11, 1007, 'decision', 'French', 104, 'D'),
    ('2020-11-26', 23, 1004, 'skip', 'Persian', 56, 'A'),
    ('2020-11-25', 20, 1003, 'transfer', 'Italian', 45, 'C');
    

   #question 1 
    SELECT ds, COUNT(*)/24 AS no_of_job 
  FROM job_data 
   WHERE ds BETWEEN '2020-11-01' AND '2020-11-30' 
GROUP BY ds;

#question 2
WITH CTE AS (
SELECT
ds,
COUNT(job_id) AS num_jobs,
SUM(time_spent) AS total_time
FROM
job_data
WHERE
event IN(‘transfer ;’decision’)
AND ds BETWEEN ‘2020-11-01’ AND ‘2020-11-30’
GROUP BY
ds
)
SELECT
ds,
ROUND(1.0*

SUM(num_jobs) OVER (ORDER BY ds ROWS BETWEEN 6 PRECEDING AND CURRENT
ROW) / SUM(total_time) OVER (ORDER BY ds ROWS BETWEEN 6 PRECEDING AND
CURRENT ROW),2) AS throughput_7d
FROM
CTE

#question 3
WITH CTE AS (
SELECT
Language,
COUNT(job_id) AS num_jobs
FROM
job_data
WHERE
event IN(‘transfer’,’decision’)
AND ds BETWEEN ‘2020-11-01’ AND ‘2020-11-30’
GROUP BY
language
),
total AS (
SELECT
COUNT(job_id) AS total_jobs
FROM
job_data
WHERE
event IN(‘transfer’,’decision’)
AND ds BETWEEN ‘2020-11-01’ AND ‘2020-11-30’
GROUP BY
language
)
SELECT
language,
ROUND(100.0*num_jobs/total_jobs,2) AS perc_jobs
FROM
CTE
CROSS OIN
total
ORDER BY
perc_job DESC


#question 4
WITH CTE AS (
SELECT
*,
ROW_NUMBER() OVER (PARTITION BY ds, job_id, actor_id) AS rownum
FROM
job_data
)
DELETE
FROM
CTE
WHERE
rownum > 1

Case Study 2 -

question#1

SELECT DATE_TRUNC('week', e.occurred_at),
       COUNT(DISTINCT e.user_id) AS weekly_active_users
FROM tutorial.yammer_events e
WHERE e.event_type = 'engagement'
  AND e.event_name = 'login'
GROUP BY 1
ORDER BY 1 

question#2

SELECT
  EXTRACT('month' from occurred_at) as month,
  count(DISTINCT user_id) as num_users
FROM tutorial.yammer_events
WHERE event_type = 'engagement'
GROUP BY month

question#4

SELECT DATE_TRUNC(‘week’, occurred_at) AS week,
 COUNT(DISTINCT user_id) AS active_weekly_user,
 SUM(CASE WHEN device IN(‘iphone 5’,’samsung galaxy s4', ‘nexus 5’, ‘iphone 5s’, ‘iphone 4s’,’nexus 7',
 ‘nokia lumia 635’,’nexus 10',’htc one’,’amazon fire phone’,’samsung galaxy note’) THEN 1 ELSE 0 END) 
 AS phone_users,
 SUM(CASE WHEN device IN(‘ipad air’,’ipad mini’, ‘kindle fire’, ‘samsung galaxy tablet’) THEN 1 ELSE 0 END) 
 AS tablet_users,
 SUM(CASE WHEN device IN(‘lenovo thinkpad’,’macbook pro’,’macbook air’,’dell inspiron desktop’,
 ‘dell inspiron notebok’,’asus chromebook’,’acer aspire notebook’,’hp pavilion desktop’,
 ‘acer aspire desktop’,’windows surface’,’mac mini’) THEN 1 ELSE 0 END) 
 AS computer_users
FROM tutorial.yammer_events
WHERE event_type = ‘engagement’
AND event_name = ‘login’
GROUP BY 1
ORDER BY 1

question #3
SELECT DATE_TRUNC(‘week’,e1.occurred_at) AS week,
 COUNT(CASE WHEN a.event_type=’engagement’ AND a.event_name=’login’ THEN e1.user_id ELSE NULL END) AS weekly_active_user,
 SUM(CASE WHEN e2.action IS NOT NULL THEN 1 ELSE 0 END) AS weekly_email_open,
 SUM(CASE WHEN e3.action IS NOT NULL THEN 1 ELSE 0 END) AS weekly_email_clickthrough
FROM tutorial.yammer_emails e1
LEFT JOIN tutorial.yammer_events a 
 ON a.occurred_at = e1.occurred_at
 AND a.event_type = ‘engagement’
 AND a.event_name = ‘login’
LEFT JOIN tutorial.yammer_emails e2
 ON e2.occurred_at = e1.occurred_at
 AND e2.user_id = e1.user_id
 AND e2.action = ‘email_open’
LEFT JOIN tutorial.yammer_emails e3
 ON e3.occurred_at = e1.occurred_at
 AND e3.user_id = e1.user_id
 AND e3.action = ‘email_clickthrough’
GROUP BY 1
ORDER by 1
